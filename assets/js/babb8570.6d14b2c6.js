"use strict";(self.webpackChunkdata_platform_playbook=self.webpackChunkdata_platform_playbook||[]).push([[934],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(r),p=a,m=f["".concat(s,".").concat(p)]||f[p]||d[p]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3498:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return f}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],c={title:"Introduction"},s="Architecture Decision Records",l={unversionedId:"architecture-decisions/index",id:"architecture-decisions/index",isDocsHomePage:!1,title:"Introduction",description:"An Architectural Decision (AD) is a software design choice that addresses a functional or non-functional requirement",source:"@site/docs/architecture-decisions/index.md",sourceDirName:"architecture-decisions",slug:"/architecture-decisions/index",permalink:"/Data-Platform-Playbook/architecture-decisions/index",editUrl:"https://github.com/LBHackney-IT/data-platform-playbook/edit/master/docs/architecture-decisions/index.md",tags:[],version:"current",frontMatter:{title:"Introduction"},sidebar:"docs",previous:{title:"VPC Peering Connection between Data Platform and Production APIs AWS accounts",permalink:"/Data-Platform-Playbook/docs/vpc-peering-connection-dataplatform-and-production-apis-account"},next:{title:"Record architecture decisions",permalink:"/Data-Platform-Playbook/architecture-decisions/record-architecture-decisions"}},u=[{value:"Records:",id:"records",children:[]}],d={toc:u};function f(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"architecture-decision-records"},"Architecture Decision Records"),(0,o.kt)("p",null,"An Architectural Decision (AD) is a software design choice that addresses a functional or non-functional requirement\nthat is architecturally significant. An Architecturally Significant Requirement (ASR) is a requirement that has a\nmeasurable effect on a software system\u2019s architecture and quality. An Architectural Decision Record (ADR) captures a\nsingle AD, such as often done when writing personal notes or meeting minutes. The collection of ADRs created and\nmaintained in a project constitute its decision log."),(0,o.kt)("h2",{id:"records"},"Records:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/record-architecture-decisions"},"1: Record Architecture Decisions")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/ingest-google-sheets-data"},"2: Ingest Google Sheets Data")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/role-based-access-control"},"3: Role Based Access Control")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/partition-strategy"},"4: Partition Strategy")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/recovered-data"},"5: Recovered Data")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/ingest-sql-flat-files"},"6: Ingest SQL flat files")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/sftp-to-s3-lambda"},"7: Copy Liberator Data from SFTP to S3")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/Data-Platform-Playbook/architecture-decisions/production-data-in-staging"},"8: Production Data in Staging"))))}f.isMDXComponent=!0}}]);